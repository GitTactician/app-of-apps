{{- range .Values.applications }}

  {{- $destinationServer := .destinationServer }}
  {{- if not $destinationServer }}
    {{- $destinationServer = $.Values.spec.destination.server }}
  {{- end }}

  # Add project
  {{- $project := .project }}
  {{- if not $project }}
    {{- $project = $.Values.spec.project }}
  {{- end }}
  {{- if not $project }}
    {{- $project = "default" }}
  {{- end }}

  {{- $appSource := .source }}
  {{- if not $appSource }}
    {{- $appSource = $.Values.spec.source }}
  {{- end }}

  {{- $appPath := .name }} # Default fallback is app name if path is not specified
  {{- if $appSource.path }}
    {{- $appPath = printf "%s/%s" $appSource.path .name }}
  {{- else }}
    {{- $appPath = printf "apps/%s" .name }}  # Default path
  {{- end }}

  {{- range $key, $value := $.Values.spec.source }}
    {{- if not (hasKey $appSource $key) }}
      {{- $appSource = merge $appSource (dict $key $value) }}
    {{- end }}
  {{- end }}

  {{- if not $appSource.targetRevision }}
    {{- $appSource = merge $appSource (dict "targetRevision" "main") }}
  {{- end }}
  {{- if not $appSource.path }}
    {{- $appSource = merge $appSource (dict "path" $appPath) }}
  {{- end }}

  # Handle syncPolicy with two-level fallback
  {{- $appSyncPolicy := .syncPolicy }}
  {{- if not $appSyncPolicy }}
    {{- $appSyncPolicy = $.Values.spec.syncPolicy }}
  {{- end }}

  {{- if $.Values.spec.syncPolicy }}
    {{- range $key, $value := $.Values.spec.syncPolicy }}
      {{- if not (hasKey $appSyncPolicy $key) }}
        {{- $appSyncPolicy = merge $appSyncPolicy (dict $key $value) }}
      {{- end }}
    {{- end }}
  {{- end }}

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ .name }}
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ $project }}
  destination:
    server: {{ $destinationServer }}
    namespace: {{ .namespace }}
  source:
    {{- range $key, $value := $appSource }}
    {{ $key }}: {{ $value }}
    {{- end }}
  {{- if $appSyncPolicy }}
syncPolicy:
  {{- range $key, $value := $appSyncPolicy }}
  {{- if not (kindIs "map" $value) }}
  # Regular value (non-map)
  {{ $key }}: {{ $value }}
  {{- else }}
  # Handle nested map
  {{ $key }}:
    {{- range $nestedKey, $nestedValue := $value }}
    {{ $nestedKey }}: {{ $nestedValue }}
    {{- end }}
    {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
